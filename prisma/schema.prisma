generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  favorites Favorite[]
  orders    Order[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Author {
  id   Int    @id @default(autoincrement())
  name String

  books Book[]
}

model Book {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  authorId    Int
  image       String

  author    Author      @relation(fields: [id], references: [id])
  favorite  Favorite[]
  OrderItem OrderItem[]
}

model Favorite {
  id     Int @id @default(autoincrement())
  bookId Int
  userId Int

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model OrderItem {
  id      Int @id @default(autoincrement())
  orderId Int
  bookId  Int

  order Order @relation(fields: [orderId], references: [id])
  book  Book  @relation(fields: [bookId], references: [id])
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  isSuccess Boolean

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}
